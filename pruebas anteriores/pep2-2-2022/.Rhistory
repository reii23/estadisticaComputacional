install.packages(gtools)
if (!requireNamespace ('gtools', quietly = TRUE== {install.packages('gtools')}
install.packages('gtools')
"if (!requireNamespace ('gtools', quietly = TRUE== {install.packages('gtools')}
install.packages
"if (!requireNamespace ('gtools', quietly = TRUE== {install.packages('gtools')}
install.packages(’gtools’)
install.packages('gtools')
install.packages('combinat')
(library(gtools))
(library(combinat))
combinations
tinytex::install_tinytex()
tinytex::tlmgr_install("xcolor")
-all
install.packages("rmarkdown")
install.packages("rmarkdown"
install.packages("rmarkdown")
install.packages("rmarkdown")
tinytex::install_tinytex()
-V
-v
fc-cache -v
(library('gtools'))
(library('combinat'))
# a) Permutaciones con y sin repetición con n=9 y r=4
permutacion_con_repeticion = nrow(permutations(9, 4 ,repeats.allowed = TRUE))
print(paste("Permutaciones con repetición:", permutacion_con_repeticion))
permutacion_sin_repeticion = nrow(permutations(9, 4 , repeats.allowed = FALSE))
print(paste("Permutaciones sin repeticion:", permutacion_sin_repeticion))
# b) Combinaciones de largo cuatro con las letras f, g, h, i y j con y sin repetición
letras = c('f', 'g', 'h', 'i', 'j')
combinaciones_sin_repeticion = choose(length(letras), 4)
print(paste("Combinaciones sin repetición:", combinaciones_sin_repeticion))
combinaciones_repeticion = choose(length(letras) + 4 - 1, 4)
print(paste("Combinaciones con repetición:", combinaciones_repeticion))
# c) Permutaciones y combinaciones con n=30 y r=20 sin repetición
n = 30
r = 20
permutaciones_sin_repeticion = factorial(n) / factorial(n - r)
print(paste("Permutaciones sin repetición:", permutaciones_sin_repeticion))
combinaciones_sin_repeticion = choose(n, r)
print(paste("Combinaciones sin repetición:", combinaciones_sin_repeticion))
# d) Permutaciones con y sin repetición con n=7 y r=5
n = 7
r = 5
permutaciones_sin_repeticion = factorial(n) / factorial(n - r)
print(paste("Permutaciones sin repetición:", permutaciones_sin_repeticion))
permutaciones_repeticion = n^r
print(paste("Permutaciones con repetición:", permutaciones_repeticion))
# e) Combinaciones de largo 2 con los números 1, 2, 3, 4 y 5 con y sin repetición
numeros = c(1,2,3,4,5)
combinaciones_sin_repeticion = choose(length(numeros), 2)
print(paste("Combinaciones sin repetición:", combinaciones_sin_repeticion))
combinaciones_repeticion = choose(length(numeros) + 2 - 1, 2)
print(paste("Combinaciones con repetición:", combinaciones_repeticion))
# f) Permutaciones y combinaciones con n=50 y r=10 sin repetición
n = 50
r = 10
permutaciones_sin_repeticion = factorial(n) / factorial(n - r)
print(paste("Permutaciones sin repetición:", permutaciones_sin_repeticion))
combinaciones_sin_repeticion = choose(n, r)
print(paste("Combinaciones sin repetición:", combinaciones_sin_repeticion))
# g) Permutaciones circulares posibles con n=6
n = 6
permutaciones_circulares = factorial(n - 1)
print(paste("Permutaciones circulares:", permutaciones_circulares))
# h) combinaciones de largo 3 con las letras x, y, z, w y q con y sin repetición.
letras = c('x', 'y', 'z', 'w', 'q')
combinaciones_sin_repeticion = choose(length(letras), 3)
print(paste("Combinaciones sin repetición:", combinaciones_sin_repeticion))
# Combinaciones con repetición
combinaciones_repeticion = length(letras)^3
print(paste("Combinaciones con repetición:", combinaciones_repeticion))
# Total de rutas posibles
total_rutas = factorial(40)
# Probabilidad de elegir la ruta más corta o la más larga
prob_1 = 1/total_rutas
print(paste("Probabilidad Ruta más corta o larga:", prob_1))
# Probabilidad de elegir la ruta más corta si la ruta previamente elegida fue diferente
prob_2 = 1/(total_rutas - 1)
print(paste("Probabilidad de que sea la ruta más corta distinta a la anterior:", prob_2))
# Si se intenta usar funciones como combinations o permutations
# para generar todas las posibles rutas puede ocurrir un problema
# debido a las limitaciones de memoria. Es menos eficiente generar
# todas las permutaciones, que calcular probabilidades usando
# las propiedades y las fórmulas matemáticas anteriormente explicadas.
probabilidad_ana = 0.20
olvido_ana = 1/15
probabildad_bob = 0.50
olvido_bob = 1/8
probabilidad_carlos = 0.20
olvido_carlos = 1/12
probabilidad_diana = 0.10
olvido_diana = 2/7
# b) ¿Cuál es la probabilidad de que el cliente haya sido atendido por Carlos?
cat("La probabilidad de ser atendido por Carlos es:", probabilidad_carlos)
# c) ¿Cuál es la probabilidad de que el cliente haya sido atendido por Ana o Diana?
probabilidad_ana_o_diana = probabilidad_ana + probabilidad_diana
cat("La Probabilidad de ser atendido por Ana o Diana es:", probabilidad_ana_o_diana)
# d) Calcule la probabilidad de que el cliente haya sido atendido por cualquiera de los camareros.
prob_cualquiera = probabilidad_ana + probabildad_bob + probabilidad_carlos + probabilidad_diana
cat("La Probabilidad de ser atendido por cualquier camarero es de:", prob_cualquiera)
# se observa que la probabilidad es de 1 o 100%
# esto quiere decir que un cliente siempre será atendido por cualquiera de los camareros,
# lo cual es lógico considerando el enunciado de que los camareros
# deben atender a todos los clientes.
probabilidad_1ero = 17/35
probabilidad_2do = 16/34
probabilidad_3ero = 15/33
probabilidad_4to = 14/32
probabilidad_total = (probabilidad_1ero*probabilidad_2do*probabilidad_3ero*probabilidad_4to)
print(paste("La probabilidad es de:", probabilidad_total))
```{r}
```{r}
resultado = 10! / (10-4)!
resultado = fact(10) / fact(10-4)
resultado = factorial(10) / factorial(10-4)
```
```{r}
# Probabilidad total de olvidar una orden
P_O <- P_A * P_O_given_A + P_B * P_O_given_B + P_C * P_O_given_C + P_D * P_O_given_D
prob_dia= dpois(0,lambda_dia)
install.package
install.package("plotly")
install.packages("plotly")
install.packages("plotly")
installed.packages(extraDistr')
installed.packages(extraDistr')
installed.packages(extraDistr')
installed.packages(extraDistr'
install.packages("extraDistr")
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
library(ggplot2)
install.packages("DT")
e1071
install.packages("e1071")
library(BSDA)
set.seed(123)
datos_muestra = rnorm(n = 40, mean = 25, sd = 2)
resultado_test = z.test(datos_muestra, mu = 24, sigma.x = 2, alternative = "greater")
resultado_test
set.seed(123)
tiempo = rnorm(n=25, mean=32, sd = 5)
resultado_test = t.test(tiempo, mu = 30, alternative = "two.sided")
resultado_test
varianza_muestra = 5
varianza_est = 4
n = 30
chi_cuadrado = (n - 1) * (varianza_muestra / varianza_est)
p_value = 1 - pchisq(chi_cuadrado, n - 1)
resultado_test = list(statistic = chi_cuadrado, p_value = p_value)
resultado_test
clientes = 200
exito_clientes = 96
p0_clientes = 0.4
resultado_test = prop.test(exito_clientes,clientes, p= p0_clientes, alternative = "greater")
resultado_test
rendimiento_antes = c(20.5, 18.7, 21.3, 19.5, 22.1, 17.8, 20, 23.4, 21.5, 18, 19.2, 22.6, 17.9, 21.7, 20.3)
rendimiento_despues = c(22, 19.1, 21.8, 20, 23.5, 18.2, 20.7, 25.1, 22.3, 28.5, 19.7, 23, 18.3, 22.2, 21.5)
resultado_test = wilcox.test(rendimiento_antes, rendimiento_despues, paired = TRUE, exact = FALSE)
resultado_test
set.seed(123)
preferencias = sample(c(0, 1), 20, replace = TRUE)
resultado_test = binom.test(sum(preferencias), length(preferencias), p = 0.5)
resultado_test
```{r}
data(airquality)
#Se grafican las variables Ozone vs Temperatura.
plot(Temp~Ozone, data=airquality)
#Se calcula su regresión lineal
lm.fit = lm(Temp~Ozone, data=airquality)
lm.fit
data(airquality)
#Se grafican las variables Ozone vs Temperatura.
plot(Temp~Ozone, data=airquality)
#Se calcula su regresión lineal
lm.fit = lm(Temp~Ozone, data=airquality)
lm.fit
#Se grafica la regresión lineal
plot(Temp~Ozone, data=airquality)
abline(69.4107, 0.2008, col="blue")
#Aquí se predicen los datos de pw para la regresión lineal de Ozone y Temp.
pw<-c(50, 78, 120, 124, 152)
predict.lm(lm.fit, data.frame(Ozone=pw))
#Se agregan los nuevos datos con su predicción al data.frame
datos <- data.frame(airquality$Ozone, airquality$Temp)
datos <- rbind(datos, c(50, 79.45120))
datos <- rbind(datos, c(78, 85.07387))
datos <- rbind(datos, c(120, 93.50788))
datos <- rbind(datos, c(124, 94.31112))
datos <- rbind(datos, c(152, 99.93379))
#Se grafican los nuevos datos
plot(airquality.Temp~airquality.Ozone, data=datos)
lm.fit=lm(airquality.Temp~airquality.Ozone, data=datos)
lm.fit
#Se grafica la nueva regresión lineal
plot(airquality.Temp~airquality.Ozone, data=datos)
abline(69.4107, 0.2008, col="blue")
#Se multiplica un dato por 100.
datos2 <- data.frame(airquality$Ozone, airquality$Temp)
#Se agrega el dato multiplicado
datos2 <- rbind(datos2, c(50*100, 79.45120))
datos2 <- rbind(datos2, c(78, 85.07387))
datos2 <- rbind(datos2, c(120, 93.50788))
datos2 <- rbind(datos2, c(124, 94.31112))
datos2 <- rbind(datos2, c(152, 99.93379))
#Se grafican los nuevos datos
plot(airquality.Temp~airquality.Ozone, data=datos2)
lm.fit=lm(airquality.Temp~airquality.Ozone, data=datos2)
lm.fit
#Se grafica la nueva regresión lineal
plot(airquality.Temp~airquality.Ozone, data=datos2)
abline(78.266755, 0.001448, col="blue")
library(MASS)
data(Boston)
boston_df = Boston[, c("rm", "medv")]
plot(df_boston$rm, df_boston$medv,
xlab = "Promedio de Habitaciones por Vivienda (RM)",
ylab = "Valor Medio de las Viviendas (MEDV, en miles de dólares)",
main = "RM vs. MEDV")
datos=read.csv("datos_preg1.csv",sep=";",header=T)
datos=read.csv("datos_preg1.csv",sep=";",header=T)
#-------------------------------
# PARTE 1
#-------------------------------
#Gráfico
g=ggplot(datos, aes(source,landing_page)) +  geom_boxplot(fill = "paleturquoise", color = "cadetblue4") +
labs(x="Sitio web", y="Tiempos de carga - landing page") +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(text = element_text(size = 12))
datos=read.csv("datos_preg1.csv",sep=";",header=T)
#-------------------------------
# PARTE 1
#-------------------------------
#Gráfico
g=ggplot(datos, aes(source,landing_page)) +  geom_boxplot(fill = "paleturquoise", color = "cadetblue4") +
labs(x="Sitio web", y="Tiempos de carga - landing page") +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(text = element_text(size = 12))
#-------------------------------
# PARTE 1
#-------------------------------
#Gráfico
g=ggplot(datos, aes(source,landing_page)) +  geom_boxplot(fill = "paleturquoise", color = "cadetblue4") +
labs(x="Sitio web", y="Tiempos de carga - landing page") +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(text = element_text(size = 12))
datos=read.csv("datos_preg1.csv",sep=";",header=T)
#-------------------------------
# PARTE 1
#-------------------------------
#Gráfico
g=ggplot(datos, aes(source,landing_page)) +  geom_boxplot(fill = "paleturquoise", color = "cadetblue4") +
labs(x="Sitio web", y="Tiempos de carga - landing page") +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(text = element_text(size = 12))
install.packages("ggplot")
install.packages("ggplot2")
library(ggplot2)
datos=read.csv("datos_preg1.csv",sep=";",header=T)
#-------------------------------
# PARTE 1
#-------------------------------
#Gráfico
g=ggplot(datos, aes(source,landing_page)) +  geom_boxplot(fill = "paleturquoise", color = "cadetblue4") +
labs(x="Sitio web", y="Tiempos de carga - landing page") +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(text = element_text(size = 12))
ggplotly(g)
install.packages("plotly")
datos=read.csv("datos_preg1.csv",sep=";",header=T)
#-------------------------------
# PARTE 1
#-------------------------------
#Gráfico
g=ggplot(datos, aes(source,landing_page)) +  geom_boxplot(fill = "paleturquoise", color = "cadetblue4") +
labs(x="Sitio web", y="Tiempos de carga - landing page") +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(text = element_text(size = 12))
ggplotly(g)
library(plotly)
datos=read.csv("datos_preg1.csv",sep=";",header=T)
#-------------------------------
# PARTE 1
#-------------------------------
#Gráfico
g=ggplot(datos, aes(source,landing_page)) +  geom_boxplot(fill = "paleturquoise", color = "cadetblue4") +
labs(x="Sitio web", y="Tiempos de carga - landing page") +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(text = element_text(size = 12))
ggplotly(g)
estadisticos=describeBy(datos$landing_page, datos$source, mat = F)
install.packages("psych")
library(psych)
datos=read.csv("datos_preg1.csv",sep=";",header=T)
#-------------------------------
# PARTE 1
#-------------------------------
#Gráfico
g=ggplot(datos, aes(source,landing_page)) +  geom_boxplot(fill = "paleturquoise", color = "cadetblue4") +
labs(x="Sitio web", y="Tiempos de carga - landing page") +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(text = element_text(size = 12))
ggplotly(g)
estadisticos=describeBy(datos$landing_page, datos$source, mat = F)
print(estadisticos)
#Evaluación de normalidad para los datos del estudiante
#Pruebas de hipótesis
t1a=lillie.test(datos$landing_page[which(datos$source=="estudiante")])
install.packages("nortest")
library(nortest)
datos=read.csv("datos_preg1.csv",sep=";",header=T)
#-------------------------------
# PARTE 1
#-------------------------------
#Gráfico
g=ggplot(datos, aes(source,landing_page)) +  geom_boxplot(fill = "paleturquoise", color = "cadetblue4") +
labs(x="Sitio web", y="Tiempos de carga - landing page") +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(text = element_text(size = 12))
ggplotly(g)
estadisticos=describeBy(datos$landing_page, datos$source, mat = F)
print(estadisticos)
#Evaluación de normalidad para los datos del estudiante
#Pruebas de hipótesis
t1a=lillie.test(datos$landing_page[which(datos$source=="estudiante")])
t1b=shapiro.test(datos$landing_page[which(datos$source=="estudiante")])
print(t1a)
print(t1b)
#QQPLOT2
qqnorm(datos$landing_page[which(datos$source=="estudiante")], pch = 19, col = "darkblue")
qqline(datos$landing_page[which(datos$source=="estudiante")])
#Los datos no son normales y existe diferencia entre los tiempos de carga con las otras web - para pior
resultado=wilcox.test(landing_page~source,datos,paired = FALSE,exact=F)
print(resultado)
#-------------------------------
# PARTE 2
#-------------------------------
#Dato que no son normales
x=datos$landing_page[which(datos$source=="estudiante")]
resultado=wilcox.test(x,mu=10.3,alternative="less",exact=F)
print(resultado)
datos=read.csv("datos_preg2.csv",sep=";",header=T)
grafico=ggplot(datos,aes(Spend_health_US ,year_expectative,,label=Country)) +
geom_point(aes(Spend_health_US,year_expectative),datos,color="darkblue",alpha=0.4) +
theme_bw() + xlab("Gasto percápita en salud ($US)") + ylab("Expectativa de vida en años") +
ggtitle("Expectativa de vida y Gasto percápita en salud ($US)") +
theme(plot.title = element_text(hjust = 0.5)) + geom_text(hjust=0.1, vjust=0.1)
ggplotly(grafico)
#--------------------------
#Regresión lineal
#--------------------------
fit_linear = lm(year_expectative~Spend_health_US,datos)
print(fit_linear)
print(summary(fit_linear))
grafico_lr=ggplot(datos,aes(Spend_health_US ,year_expectative,,label=Country)) +
geom_point(aes(Spend_health_US,year_expectative),datos,color="darkblue",alpha=0.4) +
theme_bw() + xlab("Gasto percápita en salud ($US)") + ylab("Expectativa de vida en años") +
ggtitle("Relación gasto percápita en salud ($US) y expectativa de vida para diferentes países") +
theme(plot.title = element_text(hjust = 0.5)) + geom_text(hjust=0.1, vjust=0.1) +
geom_smooth(method ="lm", formula = y ~ x,level=0.95)
ggplotly(grafico_lr)
#--------------------------
#Regresión logarítmica
#--------------------------
fit_log = nls(year_expectative ~a+b*log(Spend_health_US),data = datos, start = list(a=1,b=1))
print(summary(fit_log))
datos$year_expectative_proy= 55.7772 + 3.0205 * log(datos$Spend_health_US)
grafico_logr=ggplot(datos,aes(Spend_health_US ,year_expectative,,label=Country)) +
geom_point(aes(Spend_health_US,year_expectative),datos,color="darkblue",alpha=0.4) +
theme_bw() + xlab("Gasto percápita en saluda ($US)") + ylab("Expectativa de vida en años") +
ggtitle("Relación gasto percápita en saluda ($US) y expectativa de vida para diferentes países") +
theme(plot.title = element_text(hjust = 0.5)) + geom_text(hjust=0.1, vjust=0.1) +
geom_line(aes(Spend_health_US,year_expectative_proy),datos,color="red",cex=1,alpha=0.5) +
geom_smooth(method ="gam", formula = y ~ log(x),level=0.95)
ggplotly(grafico_logr)
#-----------------
# Muestra homogénea
#-----------------
tabla = rbind(c(69,43),c(97,59))
colnames(tabla) = c("UNIMET","UCV")
rownames(tabla) = c("Masculino","Femenino")
kable(tabla)
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
datos=read.csv("datos_preg1.csv",sep=";",header=T)
#-------------------------------
# PARTE 1
#-------------------------------
#Gráfico
g=ggplot(datos, aes(source,landing_page)) +  geom_boxplot(fill = "paleturquoise", color = "cadetblue4") +
labs(x="Sitio web", y="Tiempos de carga - landing page") +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(text = element_text(size = 12))
datos=read.csv("datos_preg1.csv",sep=";",header=T)
#-------------------------------
# PARTE 1
#-------------------------------
#Gráfico
g=ggplot(datos, aes(source,landing_page)) +  geom_boxplot(fill = "paleturquoise", color = "cadetblue4") +
labs(x="Sitio web", y="Tiempos de carga - landing page") +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(text = element_text(size = 12))
datos=read.csv("datos_preg1.csv",sep=";",header=T)
#-------------------------------
# PARTE 1
#-------------------------------
#Gráfico
g=ggplot(datos, aes(source,landing_page)) +  geom_boxplot(fill = "paleturquoise", color = "cadetblue4") +
labs(x="Sitio web", y="Tiempos de carga - landing page") +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(text = element_text(size = 12))
knitr::opts_chunk$set(echo = TRUE)
install.packages(c("ggplot2", "plotly", "psych", "nortest", "knitr"))
library(ggplot2)
library(plotly)
library(psych)
library(nortest)
library(knitr)
datos=read.csv("datos_preg1.csv",sep=";",header=T)
#-------------------------------
# PARTE 1
#-------------------------------
#Gráfico
g=ggplot(datos, aes(source,landing_page)) +  geom_boxplot(fill = "paleturquoise", color = "cadetblue4") +
labs(x="Sitio web", y="Tiempos de carga - landing page") +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(text = element_text(size = 12))
ggplotly(g)
knitr::opts_chunk$set(echo = TRUE)
install.packages(c("ggplot2", "plotly", "psych", "nortest", "knitr"))
library(ggplot2)
library(plotly)
library(psych)
library(nortest)
library(knitr)
datos=read.csv("datos_preg1.csv",sep=";",header=T)
#-------------------------------
# PARTE 1
#-------------------------------
#Gráfico
g=ggplot(datos, aes(source,landing_page)) +  geom_boxplot(fill = "paleturquoise", color = "cadetblue4") +
labs(x="Sitio web", y="Tiempos de carga - landing page") +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(text = element_text(size = 12))
install.packages(c("ggplot2", "plotly", "psych", "nortest", "knitr"))
install.packages(c("ggplot2", "plotly", "psych", "nortest", "knitr"))
